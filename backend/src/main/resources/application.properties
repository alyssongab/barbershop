# ====================================================================
# CONFIGURAÇÃO DA CONEXÃO COM O BANCO DE DADOS (DataSource)
# ====================================================================
# URL de conexão para o MySQL. Conectando ao banco 'db_barbearia' no servidor local.
# Os parâmetros useSSL=false, serverTimezone=UTC e allowPublicKeyRetrieval=true são para compatibilidade.
spring.datasource.url=jdbc:mysql://localhost:3306/db_barbearia?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true

# Usuário e senha do seu banco de dados MySQL.
# ATENÇÃO: Troque 'root' e 'sua_senha_aqui' pelos seus dados reais.
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}

# ====================================================================
# CONFIGURAÇÃO DO HIBERNATE (A ferramenta JPA que o Spring usa)
# ====================================================================
# Informa ao Hibernate qual o "dialeto" SQL ele deve usar para se comunicar com o MySQL 8.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

# spring.jpa.hibernate.ddl-auto: Define como o Hibernate gerencia o schema do banco.
# Opções comuns:
#   'validate': (Recomendado para agora) Verifica se as tabelas do banco correspondem às suas classes Java (Entidades). Lança um erro se houver diferença.
#   'update': Tenta atualizar o schema do banco para corresponder às suas Entidades. Bom para desenvolvimento.
#   'create': Apaga e recria o schema toda vez que a aplicação inicia. Útil para testes.
#   'none': Não faz nada.
spring.jpa.hibernate.ddl-auto=validate

# Mostra no console os comandos SQL que o Hibernate está executando. Ótimo para debug.
spring.jpa.show-sql=true

# Formata o SQL mostrado no console para ser mais legível.
spring.jpa.properties.hibernate.format_sql=true